<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_man_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set canJump and other object variables
//canJump = true;

state_id = state_idle;
entered_new_state = false;
def_walk_speed = 10;
def_friction = 1;
def_jump_speed  = -15;
def_gravity = 1;
jump_count = 0;
jump_limit = 2;
grounded = false;
loop_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var current_state = state_id;
event_user(state_id);

if(state_id != state_jump)
{
    if(y &lt; global.room_bottom &amp;&amp; place_empty(x, y+1))
    {
        state_id = state_jump;
        grounded = false;
    }
    if(grounded &amp;&amp; jump_count &lt; jump_limit &amp;&amp; keyboard_check_pressed(vk_up))
    {
        state_id = state_jump;
    }
}

if(current_state != state_id)
{
    entered_new_state = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// JUMP/FALL STATE

if(entered_new_state)
{
    sprite_index =  spr_man_jump;
    loop_index = 11;
    
    if(grounded)
    {
        vspeed = def_jump_speed;
        image_index = 0;
    }
    else
    {
        image_index = 11;
    }
    jump_count ++;
    gravity = def_gravity;
    friction = 0;
    
    grounded = false;
    enterend_new_state = false;
    
}

if(keyboard_check(vk_left))
{
    image_xscale = -1;
    hspeed = max(sxpeed - def_friction, -def_walk_speed);
}
else if (keyboard_check(vk_right))
{
    image_xscale = 1;
    hspeed = min(hspeed + def_friction, def_walk_speed)
}

else
{
    if(hspeed &lt; def_friction)
    {
        hspeed = min(speed + def_friction, 0);
    }
    else if(hspeed = def_friction)
    {
        hspeed = max(hspeed - def_friction, 0);
    }
    else
    {
        hspeed = 0;
    }
}

if(vspeed &lt; 0 &amp;&amp; keyboard_check_released(vk_up))
{
    vspeed *= 0.5;
}
else if(jump_count &lt; jump_limit &amp;&amp; keyboard_check_pressed(vk_up))
{
    entered_new_state = true;
    grounded = true;
}
if(y+vspeed == global.room_bottom)
{
    y = global.room_bottom;
    vspeed = 0;
    gravity = 0;
    jump_count = 0;
    state_id = state_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// WALK STATE

if(entered_new_state)
{
    sprite_index = spr_man_walk;
    image_index = 0;
    loop_index = 0;
    friction = 0;
    if(image_xscale &lt; 0)
    {
        hspeed*= -1;
    }
    entered_new_state = false;    
}

if((image_xscale &lt; 0 &amp;&amp; !keyboard_check(vk_left)) || (image_xscale &gt; 0 &amp;&amp; !keyboard_check(vk_right)))
{
    state_id = state_idle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IDLE STATE

if(entered_new_state)
{
    sprite_index = spr_man_idle;
    image_index = 0;
    loop_index = 0;
    friction = def_friction;
    entered_new_state = false;
}

if(keyboard_check(vk_left))
{
    state_id = state_walk;
    image_xscale = -1;
}

else if(keyboard_check(vk_right))
{
    state_id = state_walk;
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = loop_index;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
